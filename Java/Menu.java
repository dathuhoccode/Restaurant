/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Restaurant.Java;
import javafx.scene.image.Image;
import javafx.stage.FileChooser;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.*;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.sql.*;

/**
 *
 * @author MY ASUS
 */
public class Menu extends javax.swing.JFrame {

    /**
     * Creates new form Menu
     */
    public Menu() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    public void initComponents() {
        try{
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost/Restaurant","root","1234");
            Statement statement = con.createStatement();
            ResultSet resultSet = statement.executeQuery("select * from food");

            jPanel1 = new javax.swing.JPanel();
            jLabel1 = new javax.swing.JLabel();
            jTextField1 = new javax.swing.JTextField();
            jTextField1.addKeyListener(new KeyAdapter() {
                @Override
                public void keyTyped(KeyEvent e) {
                    char c = e.getKeyChar();
                    if (!(Character.isLetter(c)||c == ' ')) {
                        e.consume(); // Ngăn chặn ký tự không phải chữ được nhập vào
                    }
                }
            });
            jTextField2 = new javax.swing.JTextField();
            jTextField2.addKeyListener(new KeyAdapter() {
                @Override
                public void keyTyped(KeyEvent e) {
                    char c = e.getKeyChar();
                    if (!Character.isDigit(c)) {
                        e.consume(); // Ngăn chặn ký tự không phải số được nhập vào
                    }
                }
            });
            jTextField3 = new javax.swing.JTextField();
            jTextField3.addKeyListener(new KeyAdapter() {
                @Override
                public void keyTyped(KeyEvent e) {
                    char c = e.getKeyChar();
                    if (!Character.isDigit(c)) {
                        e.consume(); // Ngăn chặn ký tự không phải số được nhập vào
                    }
                }
            });
            jLabel2 = new javax.swing.JLabel();
            jLabel3 = new javax.swing.JLabel();
            Add = new javax.swing.JButton();
            Edit = new javax.swing.JButton();
            Delete = new javax.swing.JButton();
            jScrollPane1 = new javax.swing.JScrollPane();
            Table = new javax.swing.JTable();
            jMenuBar1 = new javax.swing.JMenuBar();
            jMenu1 = new javax.swing.JMenu();
    //            jToggleButton1 = new javax.swing.JToggleButton();
            imag = new javax.swing.JLabel();
            path = "";

            setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

            jLabel1.setText("Food name");

            jTextField3.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jTextField3ActionPerformed(evt);
                }
            });

            jLabel2.setText("Quality");

            jLabel3.setText("Price");

            Add.setText("Add");
            Add.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    AddActionPerformed(evt);
                }
            });
//            jToggleButton1.addActionListener(new ActionListener() {
//                @Override
//                public void actionPerformed(ActionEvent e) {
//                    LoadImage(e);
//                }
//            });
            Edit.setText("Edit");
            Edit.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    EditActionPerformed(evt);
                }
            });

            Delete.setText("Delete");
            Delete.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    DeleteActionPerformed(evt);
                }
            });
//            DefaultTableModel model = (DefaultTableModel) Table.getModel();
            DefaultTableModel model = new DefaultTableModel(
                    new Object [][] {
                    },
                    new String [] {
                            "Food name", "Quality", "Price (VND)"
                    }
            ) {
                boolean[] canEdit = new boolean [] {
                        false, false, false
                };
            };
            while (resultSet.next()) {
                Object[] rowData = new Object[]{resultSet.getString("food"), resultSet.getString("quantity"), resultSet.getInt("price")};
                model.addRow(rowData);
            }

            Table.setModel(model);
        }catch (SQLException e) {
            throw new RuntimeException(e);
        }
        jScrollPane1.setViewportView(Table);

//        jToggleButton1.setText("Choose image");

        imag.setBackground(new java.awt.Color(35, 170, 50));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(38, 38, 38)
                                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(35, 35, 35)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addGap(18, 18, 18)
                                                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGap(51, 51, 51)
                                                                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGap(0, 0, Short.MAX_VALUE)))))
                                .addGap(44, 44, 44)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(Add, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
                                        .addComponent(Delete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(Edit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
//                                .addComponent(jToggleButton1)
                                .addGap(18, 18, 18)
                                .addComponent(imag, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(20, 20, 20))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 521, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(Add, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
//                                                        .addComponent(jToggleButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                )
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jLabel2)
                                                        .addComponent(Delete, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(18, 18, 18)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jLabel3)
                                                        .addComponent(Edit, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(0, 25, Short.MAX_VALUE))
                                        .addComponent(imag, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(25, 25, 25))
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jMenu1.setText("Help");
        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                JOptionPane.showMessageDialog(null, "This is a beta version, If I have time, I will update it", "Thanks for using", JOptionPane.INFORMATION_MESSAGE);
            }
        });
        setResizable(false);
        pack();
    }// </editor-fold>
    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        final int[] selectedRow = new int[1];
        selectedRow[0] = -1;
    }

    private void EditActionPerformed(java.awt.event.ActionEvent evt) {
        DefaultTableModel model = (DefaultTableModel) Table.getModel();
        final int[] selectedRow = new int[1];
        selectedRow[0] = -1;
        selectedRow[0] = Table.getSelectedRow();
        if (selectedRow[0] == -1) {
            JOptionPane.showMessageDialog(null, "Please select a row to edit.", "Error", JOptionPane.ERROR_MESSAGE);
            // Hiển thị dữ liệu của hàng đã chọn trong các JTextField

        } else {
            jTextField1.setText(model.getValueAt(selectedRow[0], 0).toString());
            jTextField2.setText(model.getValueAt(selectedRow[0], 1).toString());
            jTextField3.setText(model.getValueAt(selectedRow[0], 2).toString());
        }
    }
    private void AddActionPerformed(java.awt.event.ActionEvent evt)  {
        // TODO add your handling code here:
        final int[] selectedRow = new int[1];
        selectedRow[0] = -1;
        DefaultTableModel model = (DefaultTableModel) Table.getModel();
        selectedRow[0] = Table.getSelectedRow();
        if (selectedRow[0] == -1) {
            String foodName = jTextField1.getText();
            String quality = jTextField2.getText();
            String price = jTextField3.getText();
            if (!foodName.isEmpty() && !quality.isEmpty() && !price.isEmpty()) {
                model.addRow(new Object[]{foodName, quality, price});
                try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost/Restaurant", "root", "1234");
                     PreparedStatement preparedStatement = conn.prepareStatement("INSERT INTO food(food, quantity, price) VALUES (?, ?, ?)")) {
                    preparedStatement.setString(1, foodName);
                    preparedStatement.setString(2, quality);
                    preparedStatement.setString(3, price);
                    int insert = preparedStatement.executeUpdate();
                } catch (SQLException sqlException) {
                    sqlException.printStackTrace();
                }
                clearFields();
            } else {
                JOptionPane.showMessageDialog(null, "Please enter all information.", "Error", JOptionPane.ERROR_MESSAGE);
            }

        }else {
            // Cập nhật nếu có hàng được chọn
            // trước cập nhật
            String foodName = jTextField1.getText();
            model.setValueAt(jTextField1.getText(), selectedRow[0], 0);
            model.setValueAt(jTextField2.getText(), selectedRow[0], 1);
            model.setValueAt(jTextField3.getText(), selectedRow[0], 2);
            //sau cập nhật
            Object valueAtA = model.getValueAt(selectedRow[0], 0);
            Object valueAtB = model.getValueAt(selectedRow[0], 1);
            Object valueAtC = model.getValueAt(selectedRow[0], 2);
            String dataA = valueAtA.toString();
//                String dataB = valueAtA.toString();
//                String dataC = valueAtA.toString();
//                boolean request = false;
            try {
                Connection con = DriverManager.getConnection("jdbc:mysql://localhost/Restaurant", "root", "1234");
                Statement statement = con.createStatement();
                ResultSet resultSet = statement.executeQuery("select * from food");
                while (resultSet.next()) {
                    String test = resultSet.getString("food");
                    if(test.equals(foodName)){
                        String sql = "UPDATE food SET food = ?, quantity = ?,price = ? WHERE food = ?";
                        try (PreparedStatement preparedStatement = con.prepareStatement(sql)) {
                            // Đặt giá trị cho tham số trong câu lệnh SQL
                            preparedStatement.setObject(1, valueAtA);
                            preparedStatement.setObject(2, valueAtB);
                            // Đặt giá trị cho tham số trong điều kiện WHERE (chẳng hạn là primary key)
                            preparedStatement.setObject(3, valueAtC);
                            preparedStatement.setObject(4, test);
                            // Thực hiện cập nhật
                            int rowsAffected = preparedStatement.executeUpdate();
                        }catch (SQLException sqlException) {
                            sqlException.printStackTrace();
                        }

                    } }
            } catch (SQLException sqle){
                sqle.getMessage();
            }
            // Reset biến selectedRow
            selectedRow[0] = -1;
            // Xóa dữ liệu trong các TextField
            jTextField1.setText("");
            jTextField2.setText("");
            jTextField3.setText("");
        }
    }
//    private void LoadImage(ActionEvent e){
//        JFileChooser chooser = new JFileChooser();
//        int choose = chooser.showOpenDialog(null);
//        if(choose == JFileChooser.FILES_ONLY){
//            path = chooser.getSelectedFile().getAbsolutePath();
//            ImageIcon image = new ImageIcon(path);
//            imag.setIcon(image);
//        }
//    }
    private void DeleteActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) Table.getModel();
        int selectedRow = Table.getSelectedRow();

        if (selectedRow != -1) {
            Object valueAtA = model.getValueAt(selectedRow, 0);
            String dataA = valueAtA.toString();
            model.removeRow(selectedRow);
            try (Connection con = DriverManager.getConnection("jdbc:mysql://localhost/Restaurant", "root", "1234");
                 PreparedStatement preparedStatement = con.prepareStatement("DELETE FROM food WHERE food = ?")) {
                // Đặt giá trị cho tham số
                preparedStatement.setString(1, dataA);

                // Thực hiện câu lệnh SQL
                int rowsAffected = preparedStatement.executeUpdate();
            } catch (SQLException sqlException) {
                sqlException.printStackTrace();
            }

            clearFields();

        } else {
            JOptionPane.showMessageDialog(null, "Please select a row to delete.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    private void clearFields() {
        jTextField1.setText("");
        jTextField2.setText("");
        jTextField3.setText("");
    }


    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new menu1().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify
    private javax.swing.JButton Add;
    private javax.swing.JButton Delete;
    private javax.swing.JButton Edit;
    private javax.swing.JTable Table;
    private javax.swing.JLabel imag;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JToggleButton jToggleButton1;
    private String path;
    // End of variables declaration
}
